  public async void AddSongAutoplay( MainWindow mainWindow)
        {

          
            MusicSetting.isBrowser = true;
            mainWindow.status.Text = "Fetching...";
            IBrowser browser;
            try
            {

                browser = await Puppeteer.LaunchAsync(new LaunchOptions
                {
                    Headless = true,
                    ExecutablePath = "C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe"
                });
            }
            catch
            {
                try
                {
                    browser = await Puppeteer.LaunchAsync(new LaunchOptions
                    {
                        Headless = true,
                        ExecutablePath = "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"
                    });
                }
                catch
                {
                    await new BrowserFetcher().DownloadAsync();
                    browser = await Puppeteer.LaunchAsync(new LaunchOptions
                    {
                        Headless = true,
                    });
                }

            }
            string videoUrl = $"{currentSong.Url}&list=RD{StringUtilitiy.ExtractId(currentSong.Url)}&themeRefresh=1";
           
            // Get all playlist videos
            var videos = await mainWindow.youtube.Playlists.GetVideosAsync(videoUrl);
            foreach (var video in videos)
            {
                Console.WriteLine(video.Title);
            }
            var page = await browser.NewPageAsync();
            await page.GoToAsync(videoUrl);
            //style-scope ytd-playlist-panel-renderer
            await page.WaitForSelectorAsync(".style-scope.ytd-playlist-panel-renderer");
            await page.WaitForSelectorAsync("a#wc-endpoint");
            await page.WaitForSelectorAsync("img");
            await page.WaitForNetworkIdleAsync();
            var content = await page.GetContentAsync();
            
            await browser.CloseAsync();  
            
            var config = Configuration.Default.WithDefaultLoader();
            var context = BrowsingContext.New(config);
            var document = await context.OpenAsync(res => res.Content(content));
            var wcEndpointHrefs = document.QuerySelectorAll("a#wc-endpoint")
           .Select(a => a.GetAttribute("href"))
           .ToList();
            var wcEndpointTitles = document.QuerySelectorAll("#video-title")
          .Select(a => a.GetAttribute("title"))
          .ToList();

            List<string> urls = new List<string>();
            List<string> titles = new List<string>();
            List<string> thumbnails = new List<string>();

            int stopCount = 2;
            // Print the extracted href values
            foreach (var href in wcEndpointHrefs)
            {
                if (stopCount == 2)
                {
                    urls.Add($"https://www.youtube.com/watch?v={StringUtilitiy.ExtractId(href)}");
                    thumbnails.Add($"https://i.ytimg.com/vi/{StringUtilitiy.ExtractId(href)}/hqdefault.jpg?sqp=-oaymwEjCOADEI4CSFryq4qpAxUIARUAAAAAGAElAADIQj0AgKJDeAE=&rs=AOn4CLBzQ9ogPrePWJD7x2FhmZKlos8bDA");
                    stopCount = 0;
                    //https://i.ytimg.com/vi/nfs8NYg7yQM/hqdefault.jpg?sqp=-oaymwEjCOADEI4CSFryq4qpAxUIARUAAAAAGAElAADIQj0AgKJDeAE=&rs=AOn4CLBzQ9ogPrePWJD7x2FhmZKlos8bDA
                }
                else
                {
                    stopCount++;
                }
            }
            stopCount = 0;
            foreach (var title in wcEndpointTitles)
            {
                if (title != null && stopCount < 25)
                {
                    titles.Add(title);
                    stopCount++;
                }
            }
            for (int i = 0; i < 25; i++)
            {
                videoInfosAutoPlayQueue.Enqueue(new VideoInfo(titles[i], "From autoplay", urls[i], thumbnails[i]));
              //  Console.WriteLine($"Thumbnail: {thumbnails[i]} Title: {titles[i]} Url: {urls[i]} ");
            }        
            MusicSetting.isBrowser = false;
            mainWindow.status.Text = "Playlist loaded";
            //remove the original
            videoInfosAutoPlayQueue.Dequeue();           
            OnVideoQueueChange?.Invoke(this, null);
        }
                    // var ytdl = new YoutubeDL();
            //  OptionSet options = new OptionSet() { Format = "mp4", GetUrl = true };
            /*  RunResult<string[]> streamUrl;
              streamUrl = await ytdl.RunWithOptions(
                 new[] { currentSong.Url },
                 options,
                 CancellationToken.None
             );*/
            // description.Text = streamUrl.Data[0];